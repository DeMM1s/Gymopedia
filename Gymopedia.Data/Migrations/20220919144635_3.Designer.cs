// <auto-generated />
using System;
using Gymopedia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gymopedia.Data.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    [Migration("20220919144635_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClientSession", b =>
                {
                    b.Property<int>("ClientsId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingSessionsId")
                        .HasColumnType("integer");

                    b.HasKey("ClientsId", "TrainingSessionsId");

                    b.HasIndex("TrainingSessionsId");

                    b.ToTable("ClientSession");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OwnerCoachId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.CoachWorkDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CoachWorkDays");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Ids", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("externalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Ids");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoachWorkDayId")
                        .HasColumnType("integer");

                    b.Property<int>("CoachWorkDayIdOwner")
                        .HasColumnType("integer");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Until")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoachWorkDayId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ClientSession", b =>
                {
                    b.HasOne("Gymopedia.Domain.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gymopedia.Domain.Models.Session", null)
                        .WithMany()
                        .HasForeignKey("TrainingSessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Client", b =>
                {
                    b.HasOne("Gymopedia.Domain.Models.Coach", null)
                        .WithMany("Clients")
                        .HasForeignKey("CoachId");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Coach", b =>
                {
                    b.HasOne("Gymopedia.Domain.Models.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.CoachWorkDay", b =>
                {
                    b.HasOne("Gymopedia.Domain.Models.Calendar", null)
                        .WithMany("CoachWorkDays")
                        .HasForeignKey("CalendarId");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Ids", b =>
                {
                    b.HasOne("Gymopedia.Domain.Models.Client", null)
                        .WithMany("CoachIds")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Session", b =>
                {
                    b.HasOne("Gymopedia.Domain.Models.CoachWorkDay", null)
                        .WithMany("Sessions")
                        .HasForeignKey("CoachWorkDayId");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Calendar", b =>
                {
                    b.Navigation("CoachWorkDays");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Client", b =>
                {
                    b.Navigation("CoachIds");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.Coach", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Gymopedia.Domain.Models.CoachWorkDay", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
